ssh-sc-auth - SSH SmartCard Authentication

ssh-sc-auth is a smart-card authentication handler for use with the
AuthorizedKeysCommand feature of SSH.  The program will return a dynamic
authorized_keys entries for the user, based on either sshPublicKey or
SSL certificates stored in a remote LDAP server.


INSTALLATION
------------

# Debian:
apt-get install                 \
    libconfig-general-perl      \
    libcrypt-openssl-rsa-perl   \
    libcrypt-openssl-x509-perl  \
    libnet-ldap-perl            \
    libproc-processtable-perl   \
    libtest-perl-critic-perl

# CentOS:
yum -y install                  \
    perl-Module-Build           \
    perl-Config-General         \
    perl-Crypt-OpenSSL-RSA      \
    perl-Crypt-OpenSSL-X509     \
    perl-LDAP                   \
    perl-Proc-ProcessTable      \
    perl-Test-Perl-Critic

perl Build.PL
./Build
./Build test
./Build install

Note: you should create a user who will run ssh-sc and
ensure that /usr/local/ssh-sc files are only owned by root,
group readable by the AuthoriszedKeyCommandUser.

Example:
    useradd -d /usr/local/ssh-sc -s /usr/sbin/nologin ssh-auth
    chown -R root.ssh-auth /usr/local/ssh-sc
    find /usr/local/ssh-sc -type d -exec chmod 750 {} \;
    find /usr/local/ssh-sc -type f -exec chmod 640 {} \;
    chmod 750 /usr/local/ssh-sc/sbin/*


UNINSTALL
---------

./Build uninstall



OPENSSH VERSION
---------------

You will need a version of OpenSSH that provides the AuthorizedKeysCommand
feature.  I believe this is anything >= v6.6.1.  Debian Jessie and CentOS 7
are known to have a useable version of OpenSSH.


SSHD_CONFIG
-----------

    PubkeyAuthentication yes
    AuthorizedKeysFile /etc/ssh/ssh_authorized_keys
    AuthorizedKeyscommand /usr/local/ssh-sc/sbin/ssh-sc-auth
    AuthorizedKeysCommandUser ssh-auth


AUTHORIZED_KEYS FILES
---------------------

sshd will still load keys from the AuthorizedKeysFile even though
AuthorizedKeysCommand has been specified.  It is important to set
AuthorizedKeysFile to an approved, non-modifiable file in order to
prevent users from using their own keys (presumably passwordless).

    touch /etc/ssh/ssh_authorized_keys

    # sshd_config
    ...
    AuthorizedKeysFile /etc/ssh/ssh_authorized_keys
    ...

This will still allow the use of approved keys that are not part of
the organization's SmartCard framework.


SSH-AGENT AND AGENT-FORWARDING
------------------------------

The use of ssh-agent allows one to cache credentials in order to save the user
from having to constantly enter passwords.  While it is unclear whether it is
ssh-agent caching the user's pin or if it is OpenSC keeping the card unlocked, the
same functionality exists when a smart-card is in use.  In a nutshell, a
compromised client, running ssh-agent will allow the attacker to gain SSH
access to remote systems without requiring the knowledge of the PIN or even
having possession of the smart-card.  This gets further exacerbated when agent
forwarding is in use as smart-card authentication is chained back to the
user's system, which wouldn't require the PIN per the reasons outlined above.

   RECOMMENDATIONS
   ===============

   1) Run ssh-sc-auth only on a bastion host and require password or token
   based authentication at all internal hosts.

   2) Disable agent forwarding by adding no-agent-forwarding to the
   'ssh-options' configuration option of ssh-sc-auth and setting
   AllowAgentForwarding to 'no' in sshd_config.

   3) Run a restrictive or chrooted shell on the bastion so that the user
   does not actually have command-line access to the bastion.


